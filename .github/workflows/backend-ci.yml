name: Backend CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run code formatting check
      working-directory: ./backend
      run: |
        black --check . || echo "Black not configured"
        isort --check-only . || echo "isort not configured"
        
    - name: Run linting
      working-directory: ./backend
      run: |
        flake8 . || echo "Flake8 issues found"
        pylint **/*.py || echo "Pylint issues found"
        
    - name: Run type checking
      working-directory: ./backend
      run: |
        mypy . || echo "MyPy not configured"
        
    - name: Run unit tests
      working-directory: ./backend
      run: |
        python run_tests.py --unit-only
        
    - name: Run integration tests
      working-directory: ./backend
      run: |
        python run_tests.py --integration-only
        
    - name: Generate coverage report
      working-directory: ./backend
      run: |
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/test-results.xml
        retention-days: 7

  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Run safety check
      working-directory: ./backend
      run: safety check
      
    - name: Run bandit security linter
      working-directory: ./backend
      run: bandit -r . -f json -o bandit-report.json || echo "Bandit issues found"
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-security-report
        path: backend/bandit-report.json
        retention-days: 30
