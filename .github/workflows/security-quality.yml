name: Security and Quality Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        
    - name: Code Quality Analysis
      run: |
        echo "Running code quality analysis..."
        # Add code quality checks here
        
    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          sonar-report/
          codeql-results/
        retention-days: 30

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk security scan
      run: |
        echo "Running Snyk security scan..."
        # Add Snyk scan here
        
    - name: Run Python security scan
      working-directory: ./backend
      run: |
        pip install safety bandit semgrep
        safety check --json --output safety-report.json
        bandit -r . -f json -o bandit-report.json
        semgrep --config=auto --json --output=semgrep-report.json .
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-reports
        path: |
          trivy-results.sarif
          backend/safety-report.json
          backend/bandit-report.json
          backend/semgrep-report.json
        retention-days: 30

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        
    - name: Check for outdated dependencies
      run: |
        cd frontend && npm outdated || echo "Some dependencies are outdated"
        cd ../backend && pip list --outdated || echo "Some Python packages are outdated"
        
    - name: Check for known vulnerabilities
      run: |
        cd frontend && npm audit --audit-level=moderate
        cd ../backend && pip install safety && safety check
        
    - name: Generate dependency report
      run: |
        cd frontend && npm ls --depth=0 > frontend-deps.txt
        cd ../backend && pip freeze > backend-deps.txt
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          frontend-deps.txt
          backend-deps.txt
        retention-days: 7

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        
    - name: Check frontend licenses
      working-directory: ./frontend
      run: |
        npx license-checker --json --out frontend-licenses.json || echo "License check completed"
        
    - name: Check backend licenses
      working-directory: ./backend
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=backend-licenses.json || echo "License check completed"
        
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          frontend/frontend-licenses.json
          backend/backend-licenses.json
        retention-days: 30
