name: ASI Alliance Agent Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/agents/**'
      - 'scripts/smoke_test.py'
      - 'manifests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/agents/**'
      - 'scripts/smoke_test.py'
      - 'manifests/**'

jobs:
  smoke-tests:
    name: ASI Alliance Smoke Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run smoke tests
      run: |
        python scripts/smoke_test.py
        
    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: |
          smoke-test-results.json
        retention-days: 7

  agent-validation:
    name: Agent Validation Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate agent manifests
      run: |
        python -c "
        import json
        import os
        
        manifests = ['healthcare_agent.json', 'financial_agent.json', 'logistics_agent.json']
        
        for manifest in manifests:
            with open(f'manifests/{manifest}', 'r') as f:
                data = json.load(f)
                
            required_fields = ['name', 'agent_address', 'port', 'capabilities', 'protocols', 'asi_integration']
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                print(f'❌ {manifest} missing fields: {missing_fields}')
                exit(1)
            else:
                print(f'✅ {manifest} validation passed')
                
        print('✅ All agent manifests validated successfully')
        "
        
    - name: Test agent imports
      run: |
        python -c "
        import sys
        import os
        sys.path.append('backend')
        
        try:
            from agents.healthcare_agent.agent import healthcare_agent
            print('✅ Healthcare agent import successful')
        except Exception as e:
            print(f'❌ Healthcare agent import failed: {e}')
            exit(1)
            
        try:
            from agents.financial_agent.agent import financial_agent
            print('✅ Financial agent import successful')
        except Exception as e:
            print(f'❌ Financial agent import failed: {e}')
            exit(1)
            
        try:
            from agents.logistics_agent.agent import logistics_agent
            print('✅ Logistics agent import successful')
        except Exception as e:
            print(f'❌ Logistics agent import failed: {e}')
            exit(1)
            
        print('✅ All agent imports successful')
        "
        
    - name: Test Chat Protocol implementation
      run: |
        python -c "
        import sys
        import os
        sys.path.append('backend')
        
        from agents.healthcare_agent.agent import healthcare_agent
        from agents.financial_agent.agent import financial_agent
        from agents.logistics_agent.agent import logistics_agent
        
        # Check if agents have chat protocol included
        agents = [
            ('Healthcare', healthcare_agent),
            ('Financial', financial_agent), 
            ('Logistics', logistics_agent)
        ]
        
        for name, agent in agents:
            protocols = getattr(agent, '_protocols', [])
            chat_protocols = [p for p in protocols if hasattr(p, 'name') and 'chat' in p.name.lower()]
            
            if chat_protocols:
                print(f'✅ {name} agent has Chat Protocol')
            else:
                print(f'❌ {name} agent missing Chat Protocol')
                exit(1)
                
        print('✅ All agents have Chat Protocol implemented')
        "
        
    - name: Test MeTTa integration
      run: |
        python -c "
        import sys
        import os
        sys.path.append('backend')
        
        try:
            from knowledge.metta_kg.integration import MeTTaKnowledgeGraph
            kg = MeTTaKnowledgeGraph()
            result = kg.query('test query')
            print('✅ MeTTa Knowledge Graph integration working')
        except Exception as e:
            print(f'❌ MeTTa integration failed: {e}')
            exit(1)
        "
        
    - name: Upload validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: agent-validation-results
        path: |
          validation-results.txt
        retention-days: 7

  hackathon-compliance:
    name: Hackathon Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README badges
      run: |
        if grep -q 'tag:innovationlab' README.md && grep -q 'tag:hackathon' README.md; then
          echo '✅ Required hackathon badges found in README'
        else
          echo '❌ Missing required hackathon badges in README'
          exit 1
        fi
        
    - name: Check environment configuration
      run: |
        if [ -f '.env.example' ]; then
          echo '✅ Root .env.example file exists'
        else
          echo '❌ Missing root .env.example file'
          exit 1
        fi
        
        if [ -f 'backend/env.example' ]; then
          echo '✅ Backend .env.example file exists'
        else
          echo '❌ Missing backend .env.example file'
          exit 1
        fi
        
    - name: Check agent addresses in README
      run: |
        if grep -q 'agent1q' README.md; then
          echo '✅ Agent addresses found in README'
        else
          echo '❌ Missing agent addresses in README'
          exit 1
        fi
        
    - name: Check demo video placeholder
      run: |
        if grep -q 'Upload your demo video' demo_video_link.txt; then
          echo '⚠️  Demo video placeholder found - needs actual video URL'
        else
          echo '✅ Demo video URL appears to be set'
        fi
        
    - name: Generate compliance report
      run: |
        echo "# Hackathon Compliance Report" > compliance-report.md
        echo "Generated: $(date)" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "## Checklist" >> compliance-report.md
        echo "- [x] Required badges in README" >> compliance-report.md
        echo "- [x] Environment configuration files" >> compliance-report.md
        echo "- [x] Agent addresses documented" >> compliance-report.md
        echo "- [x] Agent manifests created" >> compliance-report.md
        echo "- [x] Smoke test script created" >> compliance-report.md
        echo "- [x] Chat Protocol implemented" >> compliance-report.md
        echo "- [x] MeTTa integration working" >> compliance-report.md
        echo "- [ ] Demo video uploaded" >> compliance-report.md
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: hackathon-compliance-report
        path: compliance-report.md
        retention-days: 30
