# Simplified Docker Compose for local development
# This avoids network issues by using Alpine-based images
services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: asi_agents
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Backend API (using existing image)
  backend:
    image: python:3.11-alpine
    working_dir: /app
    ports:
      - "5001:5001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/asi_agents
      - REDIS_URL=redis://redis:6379/0
      - FLASK_ENV=development
    volumes:
      - ./backend:/app
    command: sh -c "pip install -r requirements.txt && python app.py"
    depends_on:
      - postgres
      - redis

  # Frontend (using existing image)
  frontend:
    image: node:20-alpine
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    command: sh -c "npm install && npm run dev"
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
